{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport axios from \"axios\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signInWithRedirect, createUserWithEmailAndPassword } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIY8xI9yG3rmivIsoiAnvNzOsXqIt1Mxw\",\n  authDomain: \"crwn-clothing-app-42312.firebaseapp.com\",\n  projectId: \"crwn-clothing-app-42312\",\n  storageBucket: \"crwn-clothing-app-42312.firebasestorage.app\",\n  messagingSenderId: \"781740667941\",\n  appId: \"1:781740667941:web:42243368471be340523bcc\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth(); // auth object;\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    console.error('Email and password are required');\n    return;\n  }\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    console.log('User created:', userCredential.user);\n  } catch (error) {\n    console.error('Error creating user:', error);\n  }\n};\nexport const createNeo4jUser = async (userAuth, additionalInformation = {}) => {\n  try {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const response = await axios.post(\"http://localhost:4000/register\", {\n      displayName,\n      email,\n      ...additionalInformation\n    });\n    console.log(\"User created:\", response.data);\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n  }\n};","map":{"version":3,"names":["initializeApp","axios","getAuth","signInWithPopup","GoogleAuthProvider","signInWithRedirect","createUserWithEmailAndPassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","createAuthUserWithEmailAndPassword","email","password","console","error","userCredential","log","user","createNeo4jUser","userAuth","additionalInformation","displayName","response","post","data"],"sources":["/Volumes/External/code/my-app/frontend/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport axios from \"axios\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signInWithRedirect, createUserWithEmailAndPassword } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIY8xI9yG3rmivIsoiAnvNzOsXqIt1Mxw\",\n  authDomain: \"crwn-clothing-app-42312.firebaseapp.com\",\n  projectId: \"crwn-clothing-app-42312\",\n  storageBucket: \"crwn-clothing-app-42312.firebasestorage.app\",\n  messagingSenderId: \"781740667941\",\n  appId: \"1:781740667941:web:42243368471be340523bcc\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const auth = getAuth()   // auth object;\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    console.error('Email and password are required');\n    return;\n  }\n\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password)\n    console.log('User created:', userCredential.user);\n  } catch (error) {\n    console.error('Error creating user:', error);\n  } \n\n}\n\n\nexport const createNeo4jUser = async (userAuth,\n  additionalInformation = {}\n) => {\n  try {\n    const { displayName, email } = userAuth;\n    const response = await axios.post(\"http://localhost:4000/register\", {\n      displayName,\n      email,\n      ...additionalInformation,\n    });\n    console.log(\"User created:\", response.data);\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n  }\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,8BAA8B,QAAQ,eAAe;;AAEhI;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,yCAAyC;EACrDC,SAAS,EAAE,yBAAyB;EACpCC,aAAa,EAAE,6CAA6C;EAC5DC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGd,aAAa,CAACO,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIX,kBAAkB,CAAC,CAAC;AACzCW,QAAQ,CAACC,mBAAmB,CAAC;EAAEC,MAAM,EAAE;AAAiB,CAAC,CAAC;AAE1D,OAAO,MAAMC,IAAI,GAAGhB,OAAO,CAAC,CAAC,EAAG;AAChC,OAAO,MAAMiB,qBAAqB,GAAGA,CAAA,KAAMhB,eAAe,CAACe,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KAAMf,kBAAkB,CAACa,IAAI,EAAEH,QAAQ,CAAC;AAEhF,OAAO,MAAMM,kCAAkC,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC3E,IAAI,CAACD,KAAK,IAAI,CAACC,QAAQ,EAAE;IACvBC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;IAChD;EACF;EAEA,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMpB,8BAA8B,CAACY,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;IAClFC,OAAO,CAACG,GAAG,CAAC,eAAe,EAAED,cAAc,CAACE,IAAI,CAAC;EACnD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AAEF,CAAC;AAGD,OAAO,MAAMI,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAC5CC,qBAAqB,GAAG,CAAC,CAAC,KACvB;EACH,IAAI;IACF,MAAM;MAAEC,WAAW;MAAEV;IAAM,CAAC,GAAGQ,QAAQ;IACvC,MAAMG,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,IAAI,CAAC,gCAAgC,EAAE;MAClEF,WAAW;MACXV,KAAK;MACL,GAAGS;IACL,CAAC,CAAC;IACFP,OAAO,CAACG,GAAG,CAAC,eAAe,EAAEM,QAAQ,CAACE,IAAI,CAAC;EAC7C,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}